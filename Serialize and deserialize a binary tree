public class Codec {
 // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root==null)return " ";
       //CONVERT TREE TO STRING
        StringBuilder sb=new StringBuilder();
        //LEVEL ORDER TRAVERSAL
        Queue<TreeNode> q=new LinkedList<>();
        q.offer(root);
        while(!q.isEmpty()){
           TreeNode t= q.remove();
            if(t==null){
                sb.append("# ");
                continue;
            }
            sb.append(t.val+" ");
            q.offer(t.left);
            q.offer(t.right);
        }
        return sb.toString();
       } 
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        //STRING TO TREE
        if(data==" ")return null;
        String s[]=data.split(" ");
        Queue<TreeNode> q=new LinkedList<>();
        TreeNode root=new TreeNode(Integer.parseInt(s[0]));
        q.offer(root);
        for(int i=1;i<s.length;i++){
           TreeNode t= q.remove();
            if(!s[i].equals("#")){
                TreeNode l=new TreeNode(Integer.parseInt(s[i]));
                t.left=l;
                q.offer(l);
            }
            if(!s[++i].equals("#")){
                TreeNode r=new TreeNode(Integer.parseInt(s[i]));
                t.right=r;
                q.offer(r);
            }
        }
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
