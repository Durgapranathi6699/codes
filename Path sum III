class Solution {
    int path=0;
    public int pathSum(TreeNode root, int targetSum) {
    //     if(root==null)return 0;
    //     helper(root,targetSum,0);
    //      pathSum(root.left,targetSum);
    //      pathSum(root.right,targetSum);
    //     return path;
    // }
    // void helper(TreeNode root, int targetSum,int sum){
    //     if(root==null)return ;
    //        sum=sum+root.val;
    //     if(sum==targetSum)path++;
    //    helper(root.left,targetSum,sum);
    //      helper(root.right,targetSum,sum);
    
  //PATH SUM ==TARGETSUM
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(0,1);
        if(root==null)return 0;
        helper(root,targetSum,map,0);
        return path;
     }
    void helper(TreeNode root, int targetSum,  HashMap<Integer,Integer> map,int sum){
        if(root==null)return;
        sum=sum+root.val;
        if(map.containsKey(sum-targetSum)){
            path+=map.get(sum-targetSum);
        }
        map.put(sum,map.getOrDefault(sum,0)+1);
        
        helper(root.left,targetSum,map,sum);
        helper(root.right,targetSum,map,sum);
        map.put(sum,map.get(sum)-1);
    }
}
