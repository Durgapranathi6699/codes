class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
      Map<Integer,Integer> map=new HashMap<>();//to sttore inorder values and index
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        TreeNode root=buildTree1(preorder,0,preorder.length-1,inorder,0,inorder.length-1,map);
        return root;
    }
    TreeNode buildTree1(int preorder[],int preStart,int preEnd,int inorder[],int inStart,int inEnd, Map<Integer,Integer> map){
        if(preStart>preEnd || inStart>inEnd)return null;
        TreeNode root=new TreeNode(preorder[preStart]);
        int inRoot=map.get(root.val);
        int numsLeft=inRoot-inStart;
        root.left=buildTree1(preorder,preStart+1,preStart+numsLeft,inorder,inStart,inRoot-1,map);
        root.right=buildTree1(preorder,preStart+numsLeft+1,preEnd,inorder,inRoot+1,inEnd,map);
        return root;
    }
}
