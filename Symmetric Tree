class Solution {
    public boolean isSymmetric(TreeNode root) {
         // Queue<TreeNode> q1=new LinkedList<>();
        //   Queue<TreeNode> q2=new LinkedList<>();
        // q1.offer(root.left);
        // q2.offer(root.right);
        // while(!q1.isEmpty() &&!q2.isEmpty()){
        //    TreeNode t1=q1.remove();
        //    TreeNode t2=q2.remove();
        //     if(t1!=null && t2==null || t1==null && t2!=null){
        //         return false;
        //     }
        //     if(t1!=null){
        //         if(t1.val!=t2.val)return false;
        //         q1.offer(t1.left);
        //         q1.offer(t1.right);
        //         q2.offer(t2.right);
        //         q2.offer(t2.left);
        //     }
        // }
        // return true;
        //RECURSIVE
        return findSymmetric(root.left,root.right);//chack whether left subtree is symmetriic with right
        
    }
    public boolean findSymmetric(TreeNode l,TreeNode r){
        if(l==null || r==null){
            return l==null && r==null;//if both null then no problem it returns true
            //look for false conditions then finally we can return true
        }
        if(l.val!=r.val)return false;
        return findSymmetric(l.left,r.right) && findSymmetric(l.right,r.left);
    }
}
