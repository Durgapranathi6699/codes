class Solution {
    public TreeNode sortedListToBST(ListNode head) {
        //USING EXTRA SPACE
    //      ListNode cur=head;
    //    List<Integer> l=new ArrayList<>();
    //    while(cur!=null){
    //        l.add(cur.val);
    //        cur=cur.next; }
    //  TreeNode root= binary(l,0,l.size()-1);
    //   return root; }
    // TreeNode binary(List<Integer> l,int start,int end){
    //      if(start>end)return null;
    //     int mid=start+(end-start)/2;
    //     TreeNode root=new TreeNode(l.get(mid));
    //     root.left=binary(l,start,mid-1);
    //     root.right=binary(l,mid+1,end);
    //     return root;
    //USING RECURSION AND FINDING MID LEFT WILL BE FROM HEAD TO MID RIGHT FROM MID.NEXT
        if(head==null)return null;
        ListNode mid=findMid(head);
      TreeNode root=new TreeNode(mid.val);
         if(head==mid) return root;
        root.left=sortedListToBST(head);
        root.right=sortedListToBST(mid.next);
        return root; }
    ListNode findMid(ListNode head){
        ListNode slow= head;
        ListNode fast=head;
        ListNode pre=head;
        while(fast!=null && fast.next!=null){
            pre=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        pre.next=null;
        return slow;
    }
}
